name: CI · Build · CodeQL · GHCR · Render · Discord

on:
  push:
    branches: [ "main", "master" ]
  #workflow_dispatch:

env:
  VERSION: v1.0.${{ github.run_number }}
  GHCR_OWNER: ${{ github.repository_owner }}
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/simplex-solver-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/simplex-solver-frontend
  BACKEND_SERVICE: simplex-backend
  FRONTEND_SERVICE: simplex-frontend
  REGION: oregon
  PLAN: free

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  # =========================================================
  # 1️. CODEQL ANALYSIS
  # =========================================================
  codeql:
    name: Static Analysis (CodeQL)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

  # =========================================================
  # 2️. BACKEND TESTS
  # =========================================================
  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-24.04
    needs: codeql
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pytest
        run: pytest -q
      - name: Run manual test
        run: python -m tests.test_manual

  # =========================================================
  # 3️. BUILD & PUSH IMAGES
  # =========================================================
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-24.04
    needs: backend-tests
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      # --- Build Backend ---
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}

      # --- Build Frontend ---
      - name: Prepare Nginx Config (Replace Backend URL)
        run: |
          cp frontend/nginx.conf frontend/nginx_render.conf
          sed -i 's|proxy_pass http://backend:8000/;|proxy_pass https://simplex-backend.onrender.com/;|' frontend/nginx_render.conf
          echo "✅ Updated nginx.conf for Render deployment"

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
          build-args: |
            NGINX_CONF=nginx_render.conf

  # =========================================================
  # 4️. DEPLOY TO RENDER
  # =========================================================
  deploy-render:
    name: Deploy to Render (Create/Update Services)
    runs-on: ubuntu-24.04
    needs: build-and-push
    env:
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Define JSON for Backend service
        run: |
          cat > backend.json <<EOF
          {
            "serviceDetails": {
              "name": "${{ env.BACKEND_SERVICE }}",
              "type": "web_service",
              "runtime": "docker",
              "repo": "${{ github.repository }}",
              "region": "${{ env.REGION }}",
              "plan": "${{ env.PLAN }}",
              "dockerCommand": "",
              "envVars": [],
              "rootDir": "/",
              "dockerImage": "${{ env.BACKEND_IMAGE }}:${{ env.VERSION }}",
              "autoDeploy": false,
              "numInstances": 1,
              "disk": { "name": "data", "mountPath": "/data", "sizeGB": 1 },
              "port": 8000
            }
          }
          EOF

      - name: Define JSON for Frontend service
        run: |
          cat > frontend.json <<EOF
          {
            "serviceDetails": {
              "name": "${{ env.FRONTEND_SERVICE }}",
              "type": "web_service",
              "runtime": "docker",
              "repo": "${{ github.repository }}",
              "region": "${{ env.REGION }}",
              "plan": "${{ env.PLAN }}",
              "dockerCommand": "",
              "rootDir": "/",
              "dockerImage": "${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}",
              "autoDeploy": false,
              "numInstances": 1,
              "envVars": [
                { "key": "BACKEND_URL", "value": "https://${{ env.BACKEND_SERVICE }}.onrender.com" }
              ],
              "port": 80
            }
          }
          EOF

      - name: Try to create Backend service
        continue-on-error: true
        run: |
          curl -s -X POST https://api.render.com/v1/services \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d @backend.json || echo "Backend may already exist."

      - name: Try to create Frontend service
        continue-on-error: true
        run: |
          curl -s -X POST https://api.render.com/v1/services \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d @frontend.json || echo "Frontend may already exist."

      - name: Trigger Backend Deploy
        run: |
          BACK_ID=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services | jq -r '.[] | select(.service.name=="simplex-backend") | .service.id')
          curl -s -X POST "https://api.render.com/v1/services/${BACK_ID}/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":false}' | jq -C .

      - name: Trigger Frontend Deploy
        run: |
          FRONT_ID=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services | jq -r '.[] | select(.service.name=="simplex-frontend") | .service.id')
          curl -s -X POST "https://api.render.com/v1/services/${FRONT_ID}/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":false}' | jq -C .

  # =========================================================
  # 5️. DISCORD NOTIFICATION
  # =========================================================
  notify:
    name: Discord Notification
    runs-on: ubuntu-24.04
    needs: [deploy-render]
    if: always()
    steps:
      - name: Send status to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          STATUS="${{ job.status }}"
          REPO="${{ github.repository }}"
          URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [ "$STATUS" = "success" ]; then
            COLOR=3066993
            TITLE="✅ CI/CD Success"
          else
            COLOR=15158332
            TITLE="❌ CI/CD Failed"
          fi
          PAYLOAD=$(jq -n \
            --arg title "$TITLE" \
            --arg repo "$REPO" \
            --arg url "$URL" \
            --arg version "${{ env.VERSION }}" \
            '{embeds:[{title:$title, description:"Repo: **\($repo)**\nVersion: **\($version)**", url:$url, color:'"$COLOR"'}]}')
          curl -s -H "Content-Type: application/json" \
               -d "$PAYLOAD" "$DISCORD_WEBHOOK"
